#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import sys

def comprehensive_corpus_check(input_json_path, output_json_path):
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–ø—É—Å –∏–∑ {input_json_path}...")
    with open(input_json_path, 'r', encoding='utf-8') as f:
        corpus = json.load(f)

    words_data = corpus['metadata']['words']
    total_words = len(words_data)
    print(f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –∫–æ—Ä–ø—É—Å–µ: {total_words}")

    # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
    def determine_correct_declension(word, pos, gender):
        if pos != 'NOUN':
            return None
            
        # 1-–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –Ω–∞ -–∞/-—è
        if word.endswith(('–∞', '—è')):
            if gender in ['MASCULINE', 'FEMININE']:
                return '1st'
        
        # 2-–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ: –º—É–∂—Å–∫–æ–π —Ä–æ–¥ —Å –Ω—É–ª–µ–≤—ã–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º, —Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥ –Ω–∞ -–æ/-–µ
        elif word.endswith(('–æ', '–µ')):
            if gender == 'NEUTER':
                return '2nd'
        elif not word.endswith(('–∞', '—è', '—å')):
            if gender == 'MASCULINE':
                return '2nd'
        
        # 3-–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ: –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –Ω–∞ -—å
        elif word.endswith('—å'):
            if gender == 'FEMININE':
                return '3rd'
        
        # –†–∞–∑–Ω–æ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ (–æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏)
        heteroclitic_words = {
            '–ø—É—Ç—å', '–≤—Ä–µ–º—è', '–∏–º—è', '–ø–ª–µ–º—è', '–∑–Ω–∞–º—è', '–ø–ª–∞–º—è', '–±—Ä–µ–º—è', '—Å—Ç—Ä–µ–º—è', '—Ç–µ–º—è', '—Å–µ–º—è'
        }
        if word in heteroclitic_words:
            return 'heteroclitic'
        
        # –ù–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ (–∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ, –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã, –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏)
        indeclinable_words = {
            '–∫–∏–Ω–æ', '–∫–∞—Ñ–µ', '–º–µ—Ç—Ä–æ', '—Ç–∞–∫—Å–∏', '–º–µ–Ω—é', '–ø–∞–ª—å—Ç–æ', '–∫–æ—Ñ–µ', '–∫–∞–∫–∞–æ', '–∫–∞—à–Ω–µ', 
            '–ø–µ–Ω—Å–Ω–µ', '–º–æ–Ω–ø–∞–Ω—Å—å–µ', '–∫–æ–Ω—Ñ–µ—Ä–∞–Ω—Å—å–µ', '–∞—Ç—Ç–∞—à–µ', '–ø–æ—Ä—Ç–º–æ–Ω–µ', '—Ä–µ–∑—é–º–µ', '–∞–ª–æ—ç',
            '–∫–∞–∫–∞–¥—É', '–∫–µ–Ω–≥—É—Ä—É', '—à–∏–º–ø–∞–Ω–∑–µ', '–±–∏–µ–Ω–Ω–∞–ª–µ', '—Ä–∞–¥–∏–æ', '–≤–∏–¥–µ–æ', '–∞—É–¥–∏–æ', '—Ñ–æ—Ç–æ',
            '–∞–≤—Ç–æ', '–¥–µ–ø–æ', '—Ç—Ä–∏–æ', '—Ñ—ç–Ω—Ç–µ–∑–∏', '—Ä–µ–≥–±–∏', '—Ç–∞–Ω–≥–æ', '–º–∞—ç—Å—Ç—Ä–æ', '—Ü—É–Ω–∞–º–∏',
            '—Å–ª–æ–≤–æ', '–¥–µ–ª–æ', '–∫–æ–ª—å—Ü–æ', '–ø—è—Ç–Ω–æ', '—Ç–µ–ª–æ', '—á—É–¥–æ', '–≤—Ç–æ—Ä–æ–µ', '—è–±–ª–æ—á–∫–æ',
            '–º–∞–Ω—á–µ—Å—Ç–µ—Ä', '–±–æ–±–±–∏', '—Ç–æ–º–º–∏', '–¥–∂–æ–Ω–Ω–∏', '–¥–∂–æ–∑–µ—Ñ', '–ø—Ä–æ–∑–≤–∏—â–µ', '—à–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ',
            '–æ–æ–æ', '–∑–∏–º–±–∞–±–≤–µ', '–≥–∏–æ—Ä–≥–∏', '–º—ç—Ç—å—é', '–ª—é—Å–∏', '–Ω–ª–æ', '—Ä–µ–≥–≥–∏', '–≤–Ω—É–∫–æ–≤–æ',
            '–ª—É–∫–∞—à–µ–Ω–∫–æ', '–∞–≤—á–µ–Ω–∫–æ', '–±–∞—Ä—Ä–∏', '–±–∞–¥—Ä–∏', '–∫–æ–±–∏', '—É–≥–æ', '–∫–∞–¥–∞—Ñ–∏', '–∫–∞–Ω–¥–µ–ª–∞–∫–∏',
            '–ø–∞–±–ª–æ', '—Å–∞–º–æ–∞', '—Ç—ç–æ', '–∞–Ω–¥—Ä–µ', '–ø–µ–≥–≥–∏', '—Ç–µ—Ä–µ—â–µ–Ω–∫–æ', '–ø–∞–ª–µ—Ä–º–æ', '–≥–∞—É—á–æ',
            '—Å–∏–ª—å–≤–∏–æ', '–∏—Ä–∂–∏', '—Ç–∏–º–æ—Ç–∏', '–≥—Ä–µ–≥–æ—Ä–∏', '—Ö–µ–ª—å—Å–∏–Ω–∫–∏', '—Å–∞–∞–∫–∞—à–≤–∏–ª–∏', '–º–∏–Ω–Ω–∏—Ö–∞–Ω–æ–≤',
            '–∞–ª–µ—Ö–∞–Ω–¥—Ä–æ', '–±—É—Ä–¥–∂–∞–Ω–∞–¥–∑–µ', '–∑–æ—â–µ–Ω–∫–æ', '–¥–æ–≤–∂–µ–Ω–∫–æ', '–ø–∞–ø–∞–Ω–¥—Ä–µ—É', '—ç–ª—å–¥–æ—Ä–∞–¥–æ'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
        indeclinable_patterns = ['–æ–æ–æ', '–∞–æ', '–Ω–ª–æ', '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ']
        for pattern in indeclinable_patterns:
            if pattern in word.lower():
                return 'indeclinable'
        
        if word in indeclinable_words:
            return 'indeclinable'
        
        # –ò–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ (—á–∞—Å—Ç–æ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ)
        if word.istitle() and len(word) > 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–º–µ–Ω–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º
            foreign_names = {
                '–¥–∂–æ–∑–µ—Ñ', '–∫–æ—Ä—Ç–Ω–∏', '—Ö–∏–ª–ª–∞—Ä–∏', '–¥–∂–æ', '–≥–∞—Ä—Ä–∏', '–±–∞—Ä—Ä–∏', '–ø–µ–≥–≥–∏', '—Å—å—é–∑–∏',
                '—Ç–æ–º–º–∏', '–¥–∂–æ–Ω–Ω–∏', '–±–æ–±–±–∏', '–ª—é—Å–∏', '–º–∞—ç—Å—Ç—Ä–æ', '–ø–∞–±–ª–æ', '–∞–Ω–¥—Ä–µ', '–ø–µ–¥—Ä–æ',
                '—Ñ–µ—Ä–Ω–∞–Ω–¥–æ', '–∞–ª–æ–Ω—Å–æ', '—Å–∏–ª—å–≤–∏–æ', '–∏—Ä–∂–∏', '–≥–∏–≤–∏', '–±–∞–¥—Ä–∏', '–∫–æ–±–∏', '—É–≥–æ',
                '—Ç–∏–º–æ—Ç–∏', '–≥—Ä–µ–≥–æ—Ä–∏', '–∞–ª–µ—Ö–∞–Ω–¥—Ä–æ', '–º–∏–Ω—å–∏—Ö–∞–Ω–æ–≤', '—Å–∞–∞–∫–∞—à–≤–∏–ª–∏', '–≥–∏–æ—Ä–≥–∏',
                '–º—ç—Ç—å—é', '–±—É—Ä–¥–∂–∞–Ω–∞–¥–∑–µ', '—Ç–µ—Ä–µ—â–µ–Ω–∫–æ', '–∑–æ—â–µ–Ω–∫–æ', '–¥–æ–≤–∂–µ–Ω–∫–æ', '–ª—É–∫–∞—à–µ–Ω–∫–æ',
                '–∞–≤—á–µ–Ω–∫–æ', '–ø–∞–ø–∞–Ω–¥—Ä–µ—É', '–∫–∞–¥–∞—Ñ–∏', '–∫–∞–Ω–¥–µ–ª–∞–∫–∏', '—Ç—ç–æ', '–∞–ª—å–¥–æ', '—Å–∞–º–æ–∞',
                '–æ–Ω—Ç–∞—Ä–∏–æ', '–º–∞–ª–∞–≤–∏', '–º–æ–Ω–∞–∫–æ', '—á–∏–ª–∏', '–º–∞—Ä–æ–∫–∫–æ', '–º–∞—Ä—Ç–∏', '–∑–∏–º–±–∞–±–≤–µ',
                '—Ö–µ–ª—å—Å–∏–Ω–∫–∏', '—à–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ', '–≤–Ω—É–∫–æ–≤–æ', '—ç–ª—å–¥–æ—Ä–∞–¥–æ', '–ø–∞–ª–µ—Ä–º–æ', '–≥–∞—É—á–æ'
            }
            if word.lower() in foreign_names:
                return 'indeclinable'
        
        return None

    # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
    def determine_correct_conjugation(word, pos):
        if pos != 'VERB':
            return None
            
        # –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–∞
        
        # 1-–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ: -–∞—Ç—å, -—è—Ç—å, -—ã—Ç—å, -—É—Ç—å, -–æ—Ç—å, -—Ç–∏, -—á—å
        if word.endswith(('–∞—Ç—å', '—è—Ç—å', '—ã—Ç—å', '—É—Ç—å', '–æ—Ç—å', '—Ç–∏', '—á—å')):
            return '1st'
        
        # 2-–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ: -–∏—Ç—å
        elif word.endswith('–∏—Ç—å'):
            return '2nd'
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è 1-–≥–æ —Å–ø—Ä—è–∂–µ–Ω–∏—è
        first_conjugation_exceptions = {
            '–±—Ä–∏—Ç—å', '—Å—Ç–µ–ª–∏—Ç—å', '–∑–∏–∂–¥–∏—Ç—å—Å—è', '–≤—ã–ø–∏—Ç—å', '—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å', '–∂–∏—Ç—å'
        }
        if word in first_conjugation_exceptions:
            return '1st'
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è 2-–≥–æ —Å–ø—Ä—è–∂–µ–Ω–∏—è
        second_conjugation_exceptions = {
            '—Å–ª—ã—à–∞—Ç—å', '–¥—ã—à–∞—Ç—å', '–¥–µ—Ä–∂–∞—Ç—å', '–≥–Ω–∞—Ç—å', '—Ç–µ—Ä–ø–µ—Ç—å', '–≤–µ—Ä—Ç–µ—Ç—å', 
            '–æ–±–∏–¥–µ—Ç—å', '–∑–∞–≤–∏—Å–µ—Ç—å', '–Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å', '–≤–∏–¥–µ—Ç—å', '—Å–º–æ—Ç—Ä–µ—Ç—å', '–ª–µ–∂–∞—Ç—å'
        }
        if word in second_conjugation_exceptions:
            return '2nd'
        
        return None

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    declension_fixes = 0
    conjugation_fixes = 0
    total_checked = 0
    errors_found = []

    # –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    truly_indeclinable = {
        '–∫–∏–Ω–æ', '–∫–∞—Ñ–µ', '–º–µ—Ç—Ä–æ', '—Ç–∞–∫—Å–∏', '–º–µ–Ω—é', '–ø–∞–ª—å—Ç–æ', '–∫–æ—Ñ–µ', '–∫–∞–∫–∞–æ', '–∫–∞—à–Ω–µ', 
        '–ø–µ–Ω—Å–Ω–µ', '–º–æ–Ω–ø–∞–Ω—Å—å–µ', '–∫–æ–Ω—Ñ–µ—Ä–∞–Ω—Å—å–µ', '–∞—Ç—Ç–∞—à–µ', '–ø–æ—Ä—Ç–º–æ–Ω–µ', '—Ä–µ–∑—é–º–µ', '–∞–ª–æ—ç',
        '–∫–∞–∫–∞–¥—É', '–∫–µ–Ω–≥—É—Ä—É', '—à–∏–º–ø–∞–Ω–∑–µ', '–±–∏–µ–Ω–Ω–∞–ª–µ', '—Ä–∞–¥–∏–æ', '–≤–∏–¥–µ–æ', '–∞—É–¥–∏–æ', '—Ñ–æ—Ç–æ',
        '–∞–≤—Ç–æ', '–¥–µ–ø–æ', '—Ç—Ä–∏–æ', '—Ñ—ç–Ω—Ç–µ–∑–∏', '—Ä–µ–≥–±–∏', '—Ç–∞–Ω–≥–æ', '–º–∞—ç—Å—Ç—Ä–æ', '—Ü—É–Ω–∞–º–∏',
        '—Å–ª–æ–≤–æ', '–¥–µ–ª–æ', '–∫–æ–ª—å—Ü–æ', '–ø—è—Ç–Ω–æ', '—Ç–µ–ª–æ', '—á—É–¥–æ', '–≤—Ç–æ—Ä–æ–µ', '—è–±–ª–æ—á–∫–æ',
        '–º–∞–Ω—á–µ—Å—Ç–µ—Ä', '–±–æ–±–±–∏', '—Ç–æ–º–º–∏', '–¥–∂–æ–Ω–Ω–∏', '–¥–∂–æ–∑–µ—Ñ', '–ø—Ä–æ–∑–≤–∏—â–µ', '—à–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ',
        '–æ–æ–æ', '–∑–∏–º–±–∞–±–≤–µ', '–≥–∏–æ—Ä–≥–∏', '–º—ç—Ç—å—é', '–ª—é—Å–∏', '–Ω–ª–æ', '—Ä–µ–≥–≥–∏', '–≤–Ω—É–∫–æ–≤–æ',
        '–ª—É–∫–∞—à–µ–Ω–∫–æ', '–∞–≤—á–µ–Ω–∫–æ', '–±–∞—Ä—Ä–∏', '–±–∞–¥—Ä–∏', '–∫–æ–±–∏', '—É–≥–æ', '–∫–∞–¥–∞—Ñ–∏', '–∫–∞–Ω–¥–µ–ª–∞–∫–∏',
        '–ø–∞–±–ª–æ', '—Å–∞–º–æ–∞', '—Ç—ç–æ', '–∞–Ω–¥—Ä–µ', '–ø–µ–≥–≥–∏', '—Ç–µ—Ä–µ—â–µ–Ω–∫–æ', '–ø–∞–ª–µ—Ä–º–æ', '–≥–∞—É—á–æ',
        '—Å–∏–ª—å–≤–∏–æ', '–∏—Ä–∂–∏', '—Ç–∏–º–æ—Ç–∏', '–≥—Ä–µ–≥–æ—Ä–∏', '—Ö–µ–ª—å—Å–∏–Ω–∫–∏', '—Å–∞–∞–∫–∞—à–≤–∏–ª–∏', '–º–∏–Ω–Ω–∏—Ö–∞–Ω–æ–≤',
        '–∞–ª–µ—Ö–∞–Ω–¥—Ä–æ', '–±—É—Ä–¥–∂–∞–Ω–∞–¥–∑–µ', '–∑–æ—â–µ–Ω–∫–æ', '–¥–æ–≤–∂–µ–Ω–∫–æ', '–ø–∞–ø–∞–Ω–¥—Ä–µ—É', '—ç–ª—å–¥–æ—Ä–∞–¥–æ'
    }

    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ...")
    
    for word, features in words_data.items():
        total_checked += 1
        if total_checked % 500 == 0:
            print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_checked}/{total_words} —Å–ª–æ–≤...")
        
        pos = features.get('pos')
        gender = features.get('gender')
        current_declension = features.get('declension')
        current_conjugation = features.get('conjugation')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
        if pos == 'NOUN':
            correct_declension = determine_correct_declension(word, pos, gender)
            if correct_declension and correct_declension != current_declension:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ
                if current_declension == 'indeclinable' and word in truly_indeclinable:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ —Å–ª–æ–≤–∞
                features['declension'] = correct_declension
                declension_fixes += 1
                errors_found.append(f"–°–∫–ª–æ–Ω–µ–Ω–∏–µ: {word} ({current_declension} ‚Üí {correct_declension})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
        elif pos == 'VERB':
            correct_conjugation = determine_correct_conjugation(word, pos)
            if correct_conjugation and correct_conjugation != current_conjugation:
                features['conjugation'] = correct_conjugation
                conjugation_fixes += 1
                errors_found.append(f"–°–ø—Ä—è–∂–µ–Ω–∏–µ: {word} ({current_conjugation} ‚Üí {correct_conjugation})")

    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–ª–æ–≤: {total_checked}")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫–ª–æ–Ω–µ–Ω–∏–π: {declension_fixes}")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø—Ä—è–∂–µ–Ω–∏–π: {conjugation_fixes}")
    print(f"–í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {declension_fixes + conjugation_fixes}")

    if errors_found:
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
        for error in errors_found[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –æ—à–∏–±–æ–∫
            print(f"  {error}")
        if len(errors_found) > 20:
            print(f"  ... –∏ –µ—â–µ {len(errors_found) - 20} –æ—à–∏–±–æ–∫")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å
    with open(output_json_path, 'w', encoding='utf-8') as f:
        json.dump(corpus, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_json_path}")
    
    return declension_fixes + conjugation_fixes

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python comprehensive_corpus_check.py <input_json_file> <output_json_file>")
        sys.exit(1)
    
    input_json = sys.argv[1]
    output_json = sys.argv[2]
    total_fixes = comprehensive_corpus_check(input_json, output_json)
    
    if total_fixes > 0:
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {total_fixes} –æ—à–∏–±–æ–∫ –≤ –∫–æ—Ä–ø—É—Å–µ!")
    else:
        print(f"\n‚ú® –ö–æ—Ä–ø—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω - –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
