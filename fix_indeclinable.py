#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ—Ä–ø—É—Å–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–∫–∏ –æ—à–∏–±–æ–∫
"""

import json
import re

def load_corpus(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ—Ä–ø—É—Å –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return None

def save_corpus(corpus, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–ø—É—Å –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(corpus, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ö–æ—Ä–ø—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        return False

def fix_indeclinable_words():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ—Ä–ø—É—Å–µ"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ —Å–ª–æ–≤–∞...")
    
    corpus = load_corpus('opencorpora.json')
    if not corpus:
        return False
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã—Ö —Å–ª–æ–≤
    indeclinable_patterns = [
        # –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ -–µ
        '–±–∏–µ–Ω–Ω–∞–ª–µ', '—Ç—Ä–∏–µ–Ω–Ω–∞–ª–µ', '–∫–≤–∞–¥—Ä–∏–µ–Ω–Ω–∞–ª–µ', '–±–∏–µ–Ω–Ω–∞–ª–µ', '—Ç—Ä–∏–µ–Ω–Ω–∞–ª–µ',
        
        # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ —Å–ª–æ–≤–∞
        '–ø–∞–ª—å—Ç–æ', '–∫–∞—Ñ–µ', '–º–µ–Ω—é', '–∞–ª–æ—ç', '–∫–æ–ª—å–µ', '–ø–µ–Ω—Å–Ω–µ', '–∫–∞–±–∞—Ä–µ', 
        '–±—é—Ä–æ', '–¥–µ–ø–æ', '—Ñ–æ–π–µ', '–∞—Ç–µ–ª—å–µ', '–∫–∞–∑–∏–Ω–æ', '—à–æ—É',
        
        # –õ–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞
        '–∫–∞–∫–∞–æ', '—Ä–∞–¥–∏–æ', '–º–µ—Ç—Ä–æ', '–∫–∏–Ω–æ', '—Ç–∞–∫—Å–∏', '–∫–æ—Ñ–µ',
        
        # –ñ–∏–≤–æ—Ç–Ω—ã–µ
        '–∫–∞–∫–∞–¥—É', '–∫–µ–Ω–≥—É—Ä—É', '—à–∏–º–ø–∞–Ω–∑–µ', '—Ñ–ª–∞–º–∏–Ω–≥–æ', '–∫–æ–ª–∏–±—Ä–∏',
        
        # –î—Ä—É–≥–∏–µ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ
        '—ç—Å—Å–µ', '—Ä–µ–∑—é–º–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é', '–ø–æ—Ä—Ç–º–æ–Ω–µ', '–∫–æ–Ω—Ñ–µ—Ä–∞–Ω—Å—å–µ'
    ]
    
    fixes_made = 0
    
    for word in indeclinable_patterns:
        if word in corpus['metadata']['words']:
            features = corpus['metadata']['words'][word]
            if features.get('declension') != 'indeclinable':
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {word}: {features.get('declension')} ‚Üí indeclinable")
                features['declension'] = 'indeclinable'
                fixes_made += 1
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏–π
    for word, features in corpus['metadata']['words'].items():
        word_lower = word.lower()
        
        # –°–ª–æ–≤–∞ –Ω–∞ -–µ, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–µ
        if (word_lower.endswith('–µ') and 
            len(word_lower) > 4 and 
            features.get('pos') == 'NOUN' and
            features.get('declension') == '2nd'):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã–º
            if any(pattern in word_lower for pattern in ['–±–∏–µ–Ω–Ω–∞–ª–µ', '—Ç—Ä–∏–µ–Ω–Ω–∞–ª–µ', '—ç—Å—Å–µ', '—Ä–µ–∑—é–º–µ']):
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {word}: {features.get('declension')} ‚Üí indeclinable")
                features['declension'] = 'indeclinable'
                fixes_made += 1
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixes_made} –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã—Ö —Å–ª–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å
    if save_corpus(corpus, 'opencorpora.json'):
        print("‚úÖ –ö–æ—Ä–ø—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    
    return False

if __name__ == "__main__":
    success = fix_indeclinable_words()
    if success:
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–ª–æ–Ω—è–µ–º—ã—Ö —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
