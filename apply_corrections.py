#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import json
import os
from datetime import datetime

def load_corpus(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ—Ä–ø—É—Å –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return None

def save_corpus(corpus, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—Ä–ø—É—Å –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(corpus, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ö–æ—Ä–ø—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
        return False

def load_errors_from_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –æ—à–∏–±–æ–∫ {filename}: {e}")
        return None

def apply_corrections_to_corpus(corpus, corrections):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –∫–æ—Ä–ø—É—Å—É"""
    corrections_applied = 0
    
    for correction in corrections:
        word = correction['word']
        corrected_declension = correction.get('correctedDeclension')
        corrected_conjugation = correction.get('correctedConjugation')
        
        if word in corpus['metadata']['words']:
            features = corpus['metadata']['words'][word]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è
            if corrected_declension and features.get('pos') == 'NOUN':
                old_declension = features.get('declension', 'unknown')
                features['declension'] = corrected_declension
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ '{word}': {old_declension} ‚Üí {corrected_declension}")
                corrections_applied += 1
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä—è–∂–µ–Ω–∏—è
            if corrected_conjugation and features.get('pos') == 'VERB':
                old_conjugation = features.get('conjugation', 'unknown')
                features['conjugation'] = corrected_conjugation
                print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø—Ä—è–∂–µ–Ω–∏–µ '{word}': {old_conjugation} ‚Üí {corrected_conjugation}")
                corrections_applied += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            features['last_corrected'] = correction.get('correctedAt', datetime.now().isoformat())
            features['correction_source'] = 'admin_panel'
    
    return corrections_applied

def process_errors_file():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
    error_files = [f for f in os.listdir('.') if f.startswith('lexicon_errors_') and f.endswith('.json')]
    
    if not error_files:
        print("‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∫–Ω–æ–ø–∫–∞ '–≠–∫—Å–ø–æ—Ä—Ç')")
        return False
    
    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    latest_file = max(error_files, key=os.path.getctime)
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—à–∏–±–∫–∏
    errors_data = load_errors_from_file(latest_file)
    if not errors_data:
        return False
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    corrected_errors = [
        error for error in errors_data['errors'] 
        if error.get('status') == 'corrected'
    ]
    
    if not corrected_errors:
        print("‚ÑπÔ∏è –ù–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
        return True
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(corrected_errors)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–ø—É—Å
    corpus = load_corpus('opencorpora.json')
    if not corpus:
        return False
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    corrections_applied = apply_corrections_to_corpus(corpus, corrected_errors)
    
    if corrections_applied > 0:
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–ø—É—Å–∞
        corpus['metadata']['last_correction'] = datetime.now().isoformat()
        corpus['metadata']['corrections_applied'] = corrections_applied
        corpus['metadata']['revision'] = f"corrected_{corpus['metadata']['total_words']}_{corrections_applied}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å
        if save_corpus(corpus, 'opencorpora.json'):
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏—é
            save_corpus(corpus, 'russian_language_offline/opencorpora.json')
            print(f"üéâ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ {corrections_applied} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!")
            return True
    
    return False

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ—Ä–ø—É—Å–∞"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"opencorpora_backup_{timestamp}.json"
    
    corpus = load_corpus('opencorpora.json')
    if corpus and save_corpus(corpus, backup_filename):
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename}")
        return True
    return False

if __name__ == "__main__":
    print("üîß –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –õ–µ–∫—Å–∏–∫–æ–Ω")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if not create_backup():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        exit(1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    success = process_errors_file()
    
    if success:
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        print("üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
